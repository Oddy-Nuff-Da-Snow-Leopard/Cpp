//Разработать программу работы с бинарным деревом, в которую включить основные функции манипуляции данными.
#include <iostream>
#include <vector>
using namespace std;

#define n 3

unsigned short i;
char delimiter[] = "-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-\n";
unsigned short k = 1;

struct treeNode
{
	short key;
	treeNode *left, *right;
};

treeNode *root = nullptr;

short choice;

void menu(void);

void add(treeNode *&, short);
void output(treeNode *, short);
void removeTree(treeNode *);
void search(treeNode *, short);

treeNode *removeNode(treeNode*, short);

int main(void)
{
	vector <short> myVector;
	setlocale(0, "");
	menu();
	cout << " Ввод > "; cin >> choice;
	while (true)
	{
		while (choice < 0 || choice > 5)
		{
			cout << " Упс, ошибка ввода, попробуйте снова." << endl;
			cout << delimiter;
			cout << " Ввод > "; cin >> choice;
		}
		switch (choice)
		{

		case 0: return 0;

		case 1:
		{
			cout << delimiter;
			cout << "\tДобавление элементов в дерево." << endl;
			short key;
			cout << " Для завершения добавления элементов задайте ключ равный 0" << endl;
			cout << " Ключ элемента " << k << ": "; cin >> key;
			while (key)
			{
				myVector.insert(myVector.end(), key);
				add(root, key);
				cout << " Элемент добавлен!" << endl;
				cout << " Ключ элемента " << ++k << ": "; cin >> key;
			}
			break;
		}

		case 2:
			if (root == nullptr)
				cout << " Вывод невозможен, дерево пусто!" << endl;
			else
			{
				cout << delimiter;
				cout << "\tВывод дерева." << endl;
				cout << " Ваше дерево: " << endl;
				output(root, 0);
			}
			break;

		case 3: 
			

			if (root == nullptr)
				cout << " Удаление элемента невозможно, дерево пусто!" << endl;
			else
			{
				cout << delimiter;
				cout << "\tПоиск элемента по ключю." << endl;
				short key;
				cout << " Введите ключ элемента, который хотите удалить: "; cin >> key;
				removeNode(root, key);
			}
			break;

		case 4:
			
			if (root == nullptr)
				cout << " Очистка дерева не невозможна, дерево пусто!" << endl;
			else
			{
				cout << delimiter;
				cout << "\tОчиста дерева." << endl;
				removeTree(root);
				root = nullptr;
				k = 1;
				cout << " Все элементы дерева удалены!" << endl;
			}
			break;

		case 5:
			if (root == nullptr)
				cout << " Поиск недопустим, т.к. дерево пусто!" << endl;
			else
			{
				cout << delimiter;
				cout << "\tПоиск элемента по ключю." << endl;
				short key;
				cout << " Введите искомый ключ: "; cin >> key;
				search(root, key);
			}

		}

		cout << delimiter;
		cout << endl << "\tЧто дальше? Ввод > "; cin >> choice;
		cout << endl;
	}
}


void menu(void)
{
	cout << " Введите: " << endl;
	cout << "\t1 - для добавления элементов в дерево;" << endl;
	cout << "\t2 - для вывода дерева;" << endl;
	cout << "\t3 - для удаления элемента по ключю;" << endl;
	cout << "\t4 - для очистки дерева;" << endl;
	cout << "\t5 - для поиска элемента по ключю;" << endl;
	cout << "\t0 - для выхода." << endl;
}

void add(treeNode *&a, short key)
{
	if (a == nullptr)
	{
		a = new treeNode;
		a->key = key;
		a->left = a->right = nullptr;
		return;
	}
	else
	{
		if (key < a->key)
			add(a->left, key);

		else
			add(a->right, key);
	}
}

void output(treeNode *a, short lvl)
{
	if (a == nullptr)
		return;

	else
	{
		output(a->right, ++lvl);

		for (int i = 0; i < lvl; i++)
			cout << "|";
		cout << a->key << endl;
		lvl--;
	}
	output(a->left, ++lvl);
}


void removeTree(treeNode *a)
{
	if (a != NULL)
	{
		removeTree(a->left);
		removeTree(a->right);
		delete a;
	}
}

void search(treeNode *a, short key)
{
	if (a != nullptr)
	{
		if (key < a->key)
			search(a->left, key);

		else if (key > a->key)
			search(a->right, key);

		else
			cout << " Совпадение найдено!" << endl;
	}
	else
		cout << " Cовпадений не найдено!" << endl;
}


treeNode *removeNode(treeNode *tree, short key)
{
	treeNode *target, *a;
	if (tree->key > key)
		tree->left = removeNode(tree->left, key);
	else if (tree->key < key)
		tree->right = removeNode(tree->right, key);
	else
	{
		target = tree;
		if (tree->left == nullptr)
			tree = tree->right;
		else if (tree->right == nullptr)
			tree = tree->left;
		
		else
		{
			a = tree->left;
			if (a->right)
			{
				while (a->right->right)
					a = a->right;
				tree->key = a->right->key;
				target = a->right;
				a->right = a->right->left;
			}
			else
			{
				tree->key = a->key;
				target = a;
				tree->left = tree->left->left;
			}
		}
		delete target;
	}
	return tree;
}