//Ввести массив А, в массив В скопировать все элементы массива А, имеющие четный индекс.
//Массив В отсортировать по убыванию, используя алгоритмы сортировок: «пузырек», сортировка простой вставкой.
#include <iostream>
#include <ctime>
#include "conio.h"
using namespace std;

int sizeA, sizeB;
int i, j;
int temp;
clock_t t1, t2;


void output(int*, int);

void bubbleSorting(int*);
void insertionSorting(int*);


int main()
{
	setlocale(0, "");
	srand((unsigned)time(NULL));

	cout << "Enter the size of the array: "; cin >> sizeA;
	int *A = new int[sizeA];
	for (i = 0; i < sizeA; i++)
		A[i] = rand() % 1000;

	//cout << endl << "Random array A: " << endl;
	//output(A, sizeA);

	if (sizeA % 2 == 0)
		sizeB = sizeA / 2;
	else
		sizeB = (sizeA / 2) + 1;

	cout << " Size of the array B: " << sizeB << endl;
		
	int *B1 = new int[sizeB];
	for (i = 0, j = 0; i < sizeA, j < sizeB; i++)
	{
		if (i % 2 == 0)
		{
			B1[j] = A[i];
			j++;
		}
	}
	delete[]A;

	//cout << endl << "Array B: " << endl;
	//output(B1, sizeB);

	int *B2 = new int[sizeB];
	memcpy(B2, B1, sizeof(int)*sizeB);


	cout << endl << "  Bubble sorting" << endl;

	t1 = clock();
	bubbleSorting(B1);
	t2 = clock();
	cout << "Algorithm took " << (long double)(t2 - t1) / 1000.0<< " seconds" << endl;
	//cout << "Sorted array: " << endl;
	//output(B1, sizeB);

	delete[] B1;

	cout << endl << "  Insertion sorting" << endl;

	t1 = clock();
	insertionSorting(B2);
	t2 = clock();
	cout << "Algorithm took " << (long double)(t2 - t1) / 1000.0 << " seconds" << endl;
	//cout << "Sorted array: " << endl;
	//output(B2, sizeB);

	delete[] B2;

	return _getch();
}


void output(int *A, int size)
{
	for (i = 0; i < size; i++)
		cout << A[i] << ' ';
	cout << endl;
}


void bubbleSorting(int *A)
{
	for (i = 0; i < sizeB; i++)
	{
		for (j = 0; j < sizeB - 1; j++)
		{
			if (A[j] < A[j + 1])
			{
				temp = A[j];
				A[j] = A[j + 1];
				A[j + 1] = temp;
			}
		}
	}
}

void insertionSorting(int *A)
{
	for (i = 1; i < sizeB; i++)
	{
		temp = A[i];
		for (j = i - 1; j >= 0 && A[j] < temp; j--)
			A[j + 1] = A[j];
		A[j + 1] = temp;
	}
}