7.1 Дан двумерный массив. В каждой строке выбрать минимальный элемент и среди них максимальный. Напечатать номер строки, в которой расположен этот элемент.

7.2 Написать программу, которая вводит несколько строк текста и символ поиска и определяет суммарное число вхождений символа в текст.

#include <iostream> 
#include <iomanip>
#include <conio.h> 
#include <ctime> 
using namespace std;
int i, j, q, k;

//функции для 1-ого задания
int **matrixfunct(int n, int m);
int *minimal(int n, int m, int **A);
int maximum(int n, int *B);
int amount(int n, int *B, int max);
int number(int n, int *B, int max);

//функции для 2-го задания
char **symbolmatrix(int n);
int symbol(char **D, char symb, int n);

void main()
{
	int c;
	setlocale(0, "");
	system("color 0f");
	srand((unsigned)time(NULL));
	cout << "Выберите номер задачи(1 или 2) : ";
	cin >> c;
	cout << endl;
	switch (c)
	{
	case 1:
	{
		cout << "Дан двумерный массив. В каждой строке выбрать минимальный элемент и среди \nних максимальный. Напечатать номер строки, в которой расположен этот элемент." << endl << endl;
		int n, m;
		cout << "Введите количество строк : ";
		cin >> n;
		cout << "Введите количество столбцов : ";
		cin >> m;
		int **A = matrixfunct(n, m);
		cout << "Ваша матрица : " << endl << endl;
		for (i = 0; i < n; i++)
		{
			for (j = 0; j < m; j++)
			{
				cout << setw(4) << (*(A + i))[j];
			}
			cout << endl << endl;
		}
		int *B = minimal(n, m, A);
		cout << "Минимальные элементы каждой строки : ";
		for (i = 0; i < n; i++)
			cout << *(B + i) << ' ';
		cout << endl;
		cout << "Максимальное из них : " << maximum(n, B) << endl;
		if (amount(n, B, maximum(n, B)) == 1)
			cout << "Номер строки, в которой расположен этот элемент : " << number(n, B, maximum(n, B));
		else
		{
			int max = maximum(n, B);
			cout << "Номера строк, в которых расположены максимальные числа : ";
			for (i = 0; i < n; i++)
				if (*(B + i) == max)
					cout << i << ' ';
		}
		_getch();
		for (i = 0; i < n; i++)
			delete *(A + i);
		delete[]A;
		delete[]B;
		break;
	}
	case 2:
		cout << "Написать программу, которая вводит несколько строк текста и символ поиска \nи определяет суммарное число вхождений символа в текст." << endl << endl;
		int n;
		char symb;
		cout << "Введите количесвто строчек : ";
		cin >> n;
		char **D = symbolmatrix(n);
		cout << "Ваши строки : " << endl;
		for (i = 0; i < n; i++)
		{
			for (j = 0; j < n; j++)
			{
				cout << *(*(D + i) + j);
			}
			cout << endl;
		}

		cout << endl << "Введите нужный символ : ";
		cin >> symb;
		if (symbol(D, symb, n) == 0)
			cout << "Заданного символа нет в строках" << endl;
		else
			cout << "Число повторений заданного символа в строках : " << symbol(D, symb, n) << endl;
		_getch();
		for (i = 0; i < n; i++)
			delete *(D + i);
		delete[]D;
		break;
	}
}
//функция для выделения памяти под матрицу, и её заполнение случайными числами
int **matrixfunct(int n, int m)
{
	int **B = new int *[n];
	for (i = 0; i < n; i++)
	{
		*(B + i) = new int[m];
		for (j = 0; j < m; j++)
			(*(B + i))[j] = rand() % 11;
	}
	return B;
}
//функция для выделения памяти под массив и заполнение его минимальными элементами каждой строки
int *minimal(int n, int m, int **A)
{
	int min;
	int *C = new int[n];
	for (i = 0; i < n; i++)
	{
		min = (*(A + i))[0];
		for (j = 1; j < m; j++)
		{
			if (*(*(A + i) + j) < min)
			{
				min = *(A[i] + j);
			}
			*(C + i) = min;
		}
	}
	return C;
}
//функция для определения максимального числа из минимальных
int maximum(int n, int *B)
{
	int max;
	max = B[0];
	for (i = 0; i < n; i++)
		if (*(B + i) > max)
			max = *(B + i);
	return max;
}
//функция для определения количества строк в которых находяться максимальные числа
int amount(int n, int *B, int max)
{
	int m = 0;
	for (i = 0; i < n; i++)
		if (*(B + i) == max)
			m++;
	return m;
}
//
int number(int n, int *B, int max)
{
	for (i = 0; i < n; i++)
		if (*(B + i) == max)
			break;
	return i;
}




//функция для выделения памяти под матрицу символьного типа,и её заполнение случайными символами
char **symbolmatrix(int n)
{
	char **B;
	char random[] = "abcdefghijklmnopqrstuvwxyz";
	B = new char *[n];
	for (i = 0; i < n; i++)
		*(B + i) = new char[n];
	for (i = 0; i < n; i++)
		for (j = 0; j < n; j++)
		{
			q = rand() % 25;
			*(B[i] + j) = random[q];
		}
	return B;
}
//функция для подсчета повторений заданного символа
int symbol(char **D, char symb, int n)
{
	int count = 0;
	for (i = 0; i < n; i++)
		for (j = 0; j < n; j++)
			if (*(*(D + i) + j) == symb)
				count++;
	return count;
}