//1.Отделить корни двух уравнений и вычислить их методом дихотомии (x^2 + 4x - 2, sin(x) + 0,1).
#include <iostream>
#include <conio.h>
using namespace std;

void function1();
void function2();

const double e = 1e-3;
double a, b;

int main(void)
{
	void(*pfunct)();
	cout << "Press 1 to search for the roots of equation x^2 + 4x - 2" << endl;
	cout << "Press 2 to search for the roots of equation sin(x) + 0,1" << endl;
	unsigned __int16 c;
	cout << "Your choice : "; cin >> c;
	switch (c)
	{
	case 1: pfunct = function1; break;
	case 2: pfunct = function2; break;
	}
	pfunct();
	_getch();
	return 0;
}

void function1()
{
	cout << "Function : x^2 + 4x - 2" << endl;
	cout << "Enter the left end of the segment : "; cin >> a;
	cout << "Enter the right end of the segment : "; cin >> b;
	double A = a, B = b;
	double x = (a + b) / 2;
	bool condition = true;
	while (condition)
	{
		if ((pow(x, 2) + 4 * x - 2)*(pow(a, 2) + 4 * x - 2) <= 0)
			b = x;
		else
			a = x;
		if (abs(a - b) > 2 * e)
			x = (a + b) / 2;
		else
			condition = false;
	}
	cout << "The value of the root on the segment from " << a << " to " << b << " : " << x << endl;
}

void function2()
{
	cout << "Function : sin(x) + 0,1" << endl;
	cout << "Enter the left end of the segment : "; cin >> a;
	cout << "Enter the right end of the segment : "; cin >> b;
	double A = a, B = b;
	double x = (a + b) / 2;
	bool condition = true;
	while (condition)
	{
		if ((sin(x)+0.1)*(sin(a)+0.1) <= 0)
			b = x;
		else
			a = x;
		if (abs(a - b) > 2 * e)
			x = (a + b) / 2;
		else
			condition = false;
	}
	cout << "The value of the root on the segment from " << A << " to " << B << " : " << x << endl;
}
===============
#include <iostream>
#include <conio.h>
using namespace std;

int fmin (int,...);

int main(void)
{
	int min = fmin(10, -1, 10, -6, 7, 1, 3, -10, 16, 4, 6);
	cout << "The minimum argument passed in to the function : " << min;
	_getch();
	return 0;
}

int fmin(int n, ...)
{
	int *p = &n;
	int min = ++*p;
	for (int i = 2; i <= n; i++)
		if (*(++p) < min)
			min = *p;
	return min;
}
===============